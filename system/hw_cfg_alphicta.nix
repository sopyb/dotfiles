# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, pkgs, inputs, ... }:

{
  imports =
    [
      ./hardware/amdgpu.nix
      ./hardware/nvidia_proprietary.nix
      ./modules/desktop/desktop_environments/plasma.nix
      # ./hardware/nvidia_mesa_nvk.nix
      ./hardware/bluetooth.nix
      ./hardware/controllers.nix
      # ./hardware/openTabletDriver.nix
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "usbhid" "sd_mod" "sdhci_pci" "vfio-pci" "vfio" "kvmfr" ];

  boot.extraModprobeConfig = ''
    options kvmfr static_size_mb=32
  '';

  # other kernel modules
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [
    "kvm-amd"
    # Virt
    "vfio-pci"
    "vfio"
    "kvmfr"
  ];


  boot.extraModulePackages = with config.boot.kernelPackages; [
    config.boot.kernelPackages.kvmfr
  ];


  boot.supportedFilesystems = [ "btrfs" "ext4" "vfat" ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/f0362a99-b3b1-4fce-bbb5-c4a63e1b9c12";
    neededForBoot = true;
    options = [ "subvol=@" "noatime" "compress=zstd:3" "space_cache=v2" ];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/f0362a99-b3b1-4fce-bbb5-c4a63e1b9c12";
    fsType = "btrfs";
    neededForBoot = true;
    options = [ "subvol=@nix" "noatime" "compress=zstd:3" "space_cache=v2" ];
  };

  fileSystems."/var" = {
    device = "/dev/disk/by-uuid/f0362a99-b3b1-4fce-bbb5-c4a63e1b9c12";
    fsType = "btrfs";
    neededForBoot = true;
    options = [ "subvol=@var" "noatime" "compress=zstd:3" "space_cache=v2" ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/5c11c8ad-9148-4c58-a985-583d7989d91f";
    fsType = "btrfs";
    neededForBoot = true;
    options = [ "noatime" "compress=zstd:3" "space_cache=v2" ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/f0362a99-b3b1-4fce-bbb5-c4a63e1b9c12";
    fsType = "btrfs";
    neededForBoot = true;
    options = [ "subvol=@boot" "noatime" "compress=zstd:3" "space_cache=v2" ];
  };

  fileSystems."/boot/EFI" = {
    device = "/dev/disk/by-uuid/2322-B7EF";
    fsType = "vfat";
    options = [ "fmask=0077" "dmask=0077" ];
  };

  swapDevices = [
    # {
    #   device = "/dev/disk/by-uuid/8b628163-a58b-40d6-8376-20e380fec43c";
    # }
  ];

  services.udisks2 = {
    enable = true;
  };

  hardware.nvidia = {
    prime = {
      # offload = {
      #   enable = true;
      #   enableOffloadCmd = true;
      # };

      sync.enable = true;

      amdgpuBusId = "PCI:7:0:0";
      nvidiaBusId = "PCI:1:0:0";
    };

    powerManagement.finegrained = false;
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
